// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`resources blocks should be arrays snapshot typescript 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new google.provider.GoogleProvider(this, "google", {
      project: "my-project",
      region: "us-central1",
    });
    new google.computeAutoscaler.ComputeAutoscaler(this, "example", {
      autoscalingPolicy: {
        cooldownPeriod: 60,
        cpuUtilization: {
          target: 0.5,
        },
        maxReplicas: 8,
        minReplicas: 2,
      },
      name: "example-autoscaler",
      target: "target-for-example-autoscaler",
      zone: "us-east1-b",
    });
  }
}
"
`;

exports[`resources handle special resource names snapshot typescript 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as scaleway from "./.gen/providers/scaleway";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new scaleway.provider.ScalewayProvider(this, "scaleway", {
      region: "fr-par",
      zone: "fr-par-1",
    });
    const scalewayObjectBucketSomeBucket =
      new scaleway.objectBucket.ObjectBucket(this, "some_bucket", {
        name: "some-unique-name",
      });
    new scaleway.objectResource.ObjectResource(this, "some_file", {
      bucket: scalewayObjectBucketSomeBucket.name,
      file: "myfile",
      hash: cdktf.Fn.filemd5("myfile"),
      key: "object_path",
    });
  }
}
"
`;

exports[`resources handles special resource names without schema snapshot typescript 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as scaleway from "./.gen/providers/scaleway";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*The following providers are missing schema information and might need manual adjustments to synthesize correctly: scaleway.
    For a more precise conversion please use the --provider flag in convert.*/
    new scaleway.provider.ScalewayProvider(this, "scaleway", {
      region: "fr-par",
      zone: "fr-par-1",
    });
    const scalewayObjectBucketSomeBucket =
      new scaleway.objectBucket.ObjectBucket(this, "some_bucket", {
        name: "some-unique-name",
      });
    new scaleway.objectResource.ObjectResource(this, "some_file", {
      bucket: scalewayObjectBucketSomeBucket.name,
      file: "myfile",
      hash: cdktf.Fn.filemd5("myfile"),
      key: "object_path",
    });
  }
}
"
`;

exports[`resources maps are not arrays snapshot typescript 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as kubernetes from "./.gen/providers/kubernetes";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new kubernetes.provider.KubernetesProvider(this, "kubernetes", {
      configContext: "my-context",
      configPath: "~/.kube/config",
    });
    new kubernetes.secret.Secret(this, "secrets-xxx", {
      data: {
        xxx: "yyy",
      },
      metadata: {
        name: "secrets-xxx",
      },
    });
  }
}
"
`;

exports[`resources maps dont get camel case keys snapshot typescript 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as kubernetes from "./.gen/providers/kubernetes";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new kubernetes.provider.KubernetesProvider(this, "kubernetes", {
      configContext: "my-context",
      configPath: "~/.kube/config",
    });
    new kubernetes.secret.Secret(this, "secrets-xxx", {
      data: {
        camel_cased_key: "yes",
      },
      metadata: {
        name: "secrets-xxx",
      },
    });
  }
}
"
`;

exports[`resources same name local, var, out snapshot typescript 1`] = `
"import * as constructs from "constructs";
import * as cdktf from "cdktf";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const test = new cdktf.TerraformVariable(this, "test", {
      type: cdktf.VariableType.STRING,
    });
    const localTest = "\${" + test.value + "} + 1";
    const cdktfTerraformOutputTest = new cdktf.TerraformOutput(this, "test_1", {
      value: localTest,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    cdktfTerraformOutputTest.overrideLogicalId("test");
  }
}
"
`;
